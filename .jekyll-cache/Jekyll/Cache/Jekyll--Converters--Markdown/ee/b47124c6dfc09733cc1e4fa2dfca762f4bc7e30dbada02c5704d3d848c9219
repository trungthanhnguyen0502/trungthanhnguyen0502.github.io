I"Œ<p>T·ªïng quan:
-<a href="#"></a></p>
<ul>
  <li><a href="#-1">1. Ti·ªÅn x·ª≠ l√≠ d·ªØ li·ªáu </a>
    <ul>
      <li><a href="#-1.1">1.1 ƒê·ªçc hi·ªÉu annotated data</a></li>
      <li><a href="#-1.2">1.2 Ti·ªÅn x·ª≠ l√≠ trong utils.py</a></li>
    </ul>
  </li>
  <li><a href="#">2. Ki·∫øn tr√∫c model</a></li>
  <li><a href="#">3. Loss function</a></li>
  <li><a href="#">4. H·∫≠u x·ª≠ l√≠ output</a></li>
</ul>

<div class="imgcap">
    <div>
        <img src="https://i.imgur.com/yBpsMgh.png" width="400" />
    </div>
    <div class="thecap">H1: K·∫øt q·ªßa thu ƒë∆∞·ª£c </div>
</div>

<p>Trong hai b√†i tr∆∞·ªõc, m√¨nh ƒë√£ vi·∫øt v·ªÅ thu·∫≠t to√°n YOLO v√† YOLO_v2. Nh∆∞ng ƒë·ªçc thu·∫≠t to√°n su√¥ng th√¨ kh√≥ hi·ªÉu. ƒê·ªÉ hi·ªÉu s√¢u h∆°n, c√°ch t·ªët nh·∫•t l√† c√πng b·∫Øt tay v√†o code. M√¨nh s·∫Ω code yolo cho Face Detect.</p>

<p>Github: <a href="https://github.com/trungthanhnguyen0502/yolo-2">github trungthanhnguyen0502</a></p>

<!-- ############ -->
<p><a name="-1"></a></p>

<h2 id="1ti·ªÅn-x·ª≠-l√≠-d·ªØ-li·ªáu">1.Ti·ªÅn x·ª≠ l√≠ d·ªØ li·ªáu:</h2>

<!-- ############ -->
<p><a name="-1.1"></a></p>

<h3 id="11-ƒë·ªçc-hi·ªÉu-annotated-data">1.1 ƒê·ªçc hi·ªÉu annotated data</h3>

<p>Dataset: <a href="http://mmlab.ie.cuhk.edu.hk/projects/WIDERFace/">Wider Face</a>. 
C·∫•u tr√∫c th∆∞ m·ª•c c·ªßa WiderFace g·ªìm 2 ph·∫ßn: WIDER_ANNS ch·ª©a annotated data v√† WIDER_TRAIN ch·ª©a ·∫£nh.</p>

<!-- image code -->
<div class="imgcap">
    <div>
        <img src="https://i.imgur.com/6cjzCYK.png" width="200" />
    </div>
    <div class="thecap">H2: C·∫•u tr√∫c th∆∞ m·ª•c c·ªßa WiderFace dataset </div>
</div>
<hr />

<p>Trong WIDER_ANNS, ta ch·ªâ quan t√¢m t·ªõi wider_train.txt - ch·ª©a to√†n b·ªô th√¥ng tin v·ªÅ c√°c ·∫£nh, th√¥ng tin v·ªÅ 1 ·∫£nh bao g·ªìm:</p>
<ul>
  <li>D√≤ng 1: image path</li>
  <li>D√≤ng 2: S·ªë face trong ·∫£nh ƒë√≥ (ƒë·∫∑t l√† n)</li>
  <li>n d√≤ng ti·∫øp: t·ªça ƒë·ªô t·ª´ng face tr√™n ·∫£nh, m·ªói d√≤ng l√† 1 d√£y 10 s·ªë nh∆∞ng ta ch·ªâ quan t√¢m t·ªõi 4 s·ªë ƒë·∫ßu: l√† t·ªça ƒë·ªô left, top, width, height. D∆∞·ªõi ƒë√¢y l√† VD v·ªÅ d·ªØ li·ªáu 1 ·∫£nh.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>    0--Parade/0_Parade_marchingband_1_849.jpg
    1
    449 330 122 149 0 0 0 0 0 0 
</pre></td></tr></tbody></table></code></pre></div></div>
<hr />

<p>M√¨nh ƒë√£ code class WiderPreprocess trong <strong>wider_preprocess.py</strong> ƒë·ªÉ ti·ªÅn x·ª≠ l√≠ d·ªØ li·ªáu, c√°c thao t√°c x·ª≠ l√≠ anns, ·∫£nh, chuy·ªÉn format d·ªØ li·ªáu ƒë·ªÅu ƒë∆∞·ª£c code trong n√†y, bao g·ªìm:</p>
<ul>
  <li>Class kh·ªüi t·∫°o v·ªõi 2 tham s·ªë : annotation file path, image folder path</li>
  <li>get_img_data: ƒë·ªçc th√¥ng tin trong anns.txt v√† tr·∫£ v·ªÅ 1 list, m·ªói ph·∫ßn t·ª≠ c·ªßa list l√† 1 dict g·ªìm 3 tr∆∞·ªùng: [ img_path, face_number, face_coordinate]</li>
  <li>T·ªça ƒë·ªô ƒë√£ ƒë∆∞·ª£c chuy·ªÉn t·ª´ format : (left, top, w, h) -&gt; (xmin, ymin, xmax, ymax)</li>
  <li>Sau l·∫ßn ƒë·∫ßu ch·∫°y get_img_data(), n√™n l∆∞u v√†o 1 file (preprocessed_data.txt), l·∫ßn sau s·ª≠ d·ª•ng l·∫°i cho nhanh</li>
</ul>

<p>Code d∆∞·ªõi ƒë∆∞·ª£c m√¨nh ch·∫°y trog file <strong>main.ipynb</strong>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">wider_preprocess</span> <span class="kn">import</span> <span class="n">WiderPreprocess</span>

<span class="n">ANNS_DIR</span> <span class="o">=</span> <span class="s">"./WiderDataset/WIDER_ANNS/wider_train.txt"</span>
<span class="n">IMAGE_DIR</span> <span class="o">=</span> <span class="s">"./WiderDataset/WIDER_TRAIN/images/"</span>
<span class="n">wpreprocess</span> <span class="o">=</span> <span class="n">WiderPreprocess</span><span class="p">(</span><span class="n">ANNS_DIR</span><span class="p">,</span> <span class="n">IMAGE_DIR</span><span class="p">)</span>

<span class="c1"># d√≤ng n√†y ch·∫°y l·∫ßn ƒë·∫ßu, sau ƒë√≥ comment code l·∫°i
</span><span class="n">img_data</span> <span class="o">=</span> <span class="n">wpreprocess</span><span class="p">.</span><span class="n">get_img_data</span><span class="p">()</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"preprocessed_data.txt"</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
    <span class="n">pickle</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">img_data</span><span class="p">,</span> <span class="n">fp</span><span class="p">)</span>

<span class="c1"># Sau l·∫ßn 1, ch·ªâ c·∫ßn run 3 d√≤ng d∆∞·ªõi:
</span><span class="n">img_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"preprocessed_data.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
  <span class="n">img_data</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<hr />

<!-- ############ -->
<p><a name="-1.2"></a></p>

<h3 id="12-ti·ªÅn-x·ª≠-l√≠-trong-utilspy">1.2 Ti·ªÅn x·ª≠ l√≠ trong utils.py</h3>
<p>Sau khi c√≥ img_data ch·ª©a d·ªØ li·ªáu, ta c·∫ßn vi·∫øt 1 data_generation. C√¥ng vi·ªác ch√≠nh c·ªßa data_generation l√† chu·∫©n ho√° \((x,y,w,h)\) tr∆∞·ªõc khi fit v√†o model. C√¥ng vi·ªác n√†y ƒë∆∞·ª£c th·ª±c hi·ªán trong h√†m <strong>data_gen</strong> . Code n√†y ƒë∆∞·ª£c m√¨nh ƒë·∫∑t trong <strong>utils.py</strong> . Do code kh√° ph·ª©c t·∫°p v√† d√†i n√™n m√¨nh kh√¥ng ƒëi s√¢u v√†o gi·∫£i th√≠ch t·ª´ng d√≤ng. Tr∆∞·ªõc ti√™n b·∫°n c·∫ßn hi·ªÉu ƒë∆∞·ª£c lu·ªìng x·ª≠ l√≠ c·ªßa h√†m data_gen, sau ƒë√≥ c√≥ th·ªùi gian h√£y v·ªçc code ƒë·ªÉ hi·ªÉu s√¢u h∆°n.</p>

<p>Lu·ªìng x·ª≠ l√≠ c·ªßa h√†m data_gen:</p>
<ul>
  <li>ƒê·ªçc ·∫£nh</li>
  <li>Augmentation: xoay ·∫£nh, k√©o d√£n ·∫£nh, resize ‚Ä¶</li>
  <li>Chu·∫©n ho√° \((x,y,w,h)\) th√†nh d·∫°ng <strong>y_predict</strong> t∆∞∆°ng ·ª©ng v·ªõi \(shape = (batchsize, S, S, B, 4+1+CLASS)\)</li>
</ul>

<p>Trong main.ipynb ch·ªâ c·∫ßn import data_gen t·ª´ utils v√† code nh∆∞ sau:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">utils</span> <span class="kn">import</span> <span class="n">data_gen</span>
<span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span> <span class="o">=</span> <span class="n">data_gen</span><span class="p">(</span><span class="n">img_data</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<hr />

<!-- ############ -->
<p><a name="-2"></a></p>

<h2 id="2-ki·∫øn-tr√∫c-model">2 Ki·∫øn tr√∫c model</h2>

<p>Ki·∫øn tr√∫c CNN (backbone) b·∫°n c√≥ th·ªÉ tu·ª≥ bi·∫øn. Trong b√†i n√†y, m√¨nh s·ª≠ d·ª•ng ki·∫øn tr√∫c ƒë∆°n gi·∫£n d·∫°ng <strong>tiny-yolo</strong> - 1 lo·∫°i yolo g·ªçn, nh·∫π th√≠ch h·ª£p cho real-time v√† √≠t class. Trong tr∆∞·ªùng h·ª£p n√†y CLASS = 1 v√¨ ch·ªâ c√≥ duy nh·∫•t 1 lo·∫°i l√† khu√¥n m·∫∑t, ƒë√¢y l√† b√†i to√°n single object detect. N·∫øu b·∫°n mu·ªën nh·∫≠n d·∫°ng nhi·ªÅu lo·∫°i c√πng l√∫c (multi-object) nh∆∞ √¥ t√¥, xe m√°y, ch√≥, m√®o ‚Ä¶ th√¨ thay ƒë·ªïi gi√° tr·ªã CLASS.</p>

<p>M√¨nh code b·∫±ng keras cho d·ªÖ hi·ªÉu. Ki·∫øn tr√∫c CNN ƒë√≥ng g√≥i trong <strong>create_yolo_model</strong>. Model c√≥ t√≠nh l·∫∑p l·∫°i c·ª•m: Conv \(\longrightarrow\) BatchNorm \(\longrightarrow\) Relu \(\longrightarrow\) Polling</p>

<p>V·ªõi 5 BBox v√† S=13, Class=1, output l√† 1 tensor v·ªõi \(shape = (batchsize, S, S, B, 4+1+CLASS) = (13,13,5,6)\).</p>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span><span class="p">,</span> <span class="n">Model</span><span class="p">,</span> <span class="n">load_model</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Reshape</span><span class="p">,</span> <span class="n">Activation</span><span class="p">,</span> <span class="n">Conv2D</span><span class="p">,</span> <span class="n">Input</span><span class="p">,</span> <span class="n">MaxPooling2D</span><span class="p">,</span> <span class="n">BatchNormalization</span><span class="p">,</span> <span class="n">Flatten</span><span class="p">,</span> <span class="n">Dense</span>
<span class="kn">from</span> <span class="nn">keras.layers.advanced_activations</span> <span class="kn">import</span> <span class="n">LeakyReLU</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">scipy.io</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>

<span class="k">def</span> <span class="nf">create_yolo_model</span><span class="p">():</span>
    <span class="n">GRID_H</span><span class="p">,</span> <span class="n">GRID_W</span> <span class="o">=</span> <span class="mi">13</span> <span class="p">,</span> <span class="mi">13</span>
    <span class="n">BOX</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">CLASS</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> <span class="n">use_bias</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">416</span><span class="p">,</span><span class="mi">416</span><span class="p">,</span><span class="mi">3</span><span class="p">)))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">BatchNormalization</span><span class="p">())</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.1</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="n">i</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> <span class="n">use_bias</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
        <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">BatchNormalization</span><span class="p">())</span>
        <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.1</span><span class="p">))</span>
        <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>

    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> <span class="n">use_bias</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">BatchNormalization</span><span class="p">())</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.1</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">))</span>

    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> <span class="n">use_bias</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">BatchNormalization</span><span class="p">())</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.1</span><span class="p">))</span>

    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> <span class="n">use_bias</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">BatchNormalization</span><span class="p">())</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.1</span><span class="p">))</span>

    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv2D</span><span class="p">(</span><span class="n">BOX</span> <span class="o">*</span> <span class="p">(</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">CLASS</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">kernel_initializer</span><span class="o">=</span><span class="s">'he_normal'</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Activation</span><span class="p">(</span><span class="s">'linear'</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Reshape</span><span class="p">((</span><span class="n">GRID_H</span><span class="p">,</span> <span class="n">GRID_W</span><span class="p">,</span> <span class="n">BOX</span><span class="p">,</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">CLASS</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">model</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="3loss-function">3.Loss Function.</h1>
<p>Kh√°c v·ªõi c√°c thu·∫≠t to√°n th√¥ng th∆∞·ªùng <strong>y_pred</strong> v√† <strong>y_true</strong> c√≥ <strong>format gi·ªëng nhau</strong>, output c·ªßa m·∫°ng yolo n√†y ch·ªâ l√† <strong>d·∫°ng ti·ªÅn d·ªØ li·ªáu</strong> c·ªßa t·ªça ƒë·ªô, h√¨nh d·∫°ng hay ph√¢n b·ªë x√°c su·∫•t ‚Ä¶kh√°c d·∫°ng v·ªõi y_true -&gt; c·∫ßn ph·∫£i <strong>x·ª≠ l√≠</strong> ri√™ng t·ª´ng th√†nh ph·∫ßn c·ªßa y_pred trong loss function v·ªõi c√°c h√†m sigmoid, sofmax, ‚Ä¶ ƒë·ªÉ ƒë∆∞a y_pred v√† y_true v·ªÅ c√πng d·∫°ng‚Ä¶</p>

<p>Nh·∫Øc l·∫°i c√¥ng th·ª©c: (b·∫°n n√™n m·ªü l·∫°i post 2)</p>
<div style="margin-top:50px" align="center">
    <img width="500px" src="https://i.imgur.com/HyTTFNU.png" />
    <img width="500px" src="https://i.imgur.com/vXIJMiW.jpg" />
</div>

<p>ƒê√¢y l√† ph·∫ßn kh√≥, ƒë√≤i h·ªèi s·ª± c·∫©n th·∫≠n v·ªÅ logic. Thu·∫≠t to√°n sai, train m·∫•t c·∫£ ng√†y m·ªõi ph√°t hi·ªán ra model kh√¥ng h·ªôi t·ª• m·ªõi kh·ªï. ƒêo·∫°n code n√†y m√¨nh c√≥ tham kh·∫£o 1 repo tr√™n github, tuy nhi√™n v·ªÅ sau m·ªõi nh·∫≠n ra code ƒë√≥ c≈©ng b·ªã sai nhi·ªÅu ch·ªó. Ch·∫Øc repo ƒë√≥ c≈©ng ƒë∆∞·ª£c tham kh·∫£o t·ª´ 1 ch·ªó kh√°c v·ªÅ r·ªìi s·ª≠a nh∆∞ng b·ªã sai.</p>

<p>Trong code n√†y, m√¨nh s·ª≠ d·ª•ng Anchor box tham kh·∫£o t·ª´ ngu·ªìn kh√°c (kh√¥ng nh·ªõ link):</p>

\[[[1.08,1.19],  [3.42,4.41],  [6.63,11.38],  [9.42,5.11],  [16.62,10.52]]\]

<p><strong>y_true</strong>: shape \((batchsize, 13, 13, 5, 4 + 1+ 1)\) (gi·ªëng y_pred) trong ƒë√≥:</p>
<ul>
  <li>4 s·ªë ƒë·∫ßu: x_min, y_min, x_max, y_max (t√≠nh theo pixel - ch∆∞a chu·∫©n h√≥a theo k√≠ch th∆∞·ªõc image) =&gt; c·∫ßn chu·∫©n ho√° theo Anchor box</li>
  <li>1 Box confidence, value = 1 n·∫øu Cell ƒë√≥ t·ªìn t·∫°i object, ng∆∞·ª£c l·∫°i = 0.</li>
  <li>1 CLASS: Do l√† b√†i to√°n single-object -&gt; gi√° tr·ªã b·∫±ng 1 n·∫øu Cell c√≥ object, ng∆∞·ª£c l·∫°i = 0</li>
</ul>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
</pre></td><td class="rouge-code"><pre><span class="c1"># ANCHORS l√† 5 anchor box ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a t·ª´ tr∆∞·ªõc (copy ·ªü paper n√†o ƒë√≥ v·ªÅ)
</span><span class="k">def</span> <span class="nf">custom_loss</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">):</span>
    <span class="c1"># CONSTANT 
</span>    <span class="n">ANCHORS</span> <span class="o">=</span> <span class="s">'1.08,1.19,  3.42,4.41,  6.63,11.38,  9.42,5.11,  16.62,10.52'</span>
    <span class="n">ANCHORS</span> <span class="o">=</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">ANCHORS</span><span class="p">.</span><span class="n">strip</span><span class="p">())</span> <span class="k">for</span> <span class="n">ANCHORS</span> <span class="ow">in</span> <span class="n">ANCHORS</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)]</span>
    <span class="n">ANCHORS</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">ANCHORS</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">NORM_H</span><span class="p">,</span> <span class="n">NORM_W</span> <span class="o">=</span> <span class="mi">416</span><span class="p">,</span> <span class="mi">416</span>
    <span class="n">GRID_H</span><span class="p">,</span> <span class="n">GRID_W</span> <span class="o">=</span> <span class="mi">13</span> <span class="p">,</span> <span class="mi">13</span>
    <span class="n">BOX</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">CLASS</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="c1">## tr·ªçng s·ªë cho t·ª´ng loss th√†nh ph·∫ßn
</span>    <span class="n">SCALE_NOOB</span><span class="p">,</span> <span class="n">SCALE_CONF</span><span class="p">,</span> <span class="n">SCALE_COOR</span><span class="p">,</span> <span class="n">SCALE_PROB</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">,</span> <span class="mf">1.0</span>

    <span class="c1">### x and y predict    
</span>    <span class="n">pred_box_xy</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">sigmoid</span><span class="p">(</span><span class="n">y_pred</span><span class="p">[:,:,:,:,:</span><span class="mi">2</span><span class="p">])</span>
    
    <span class="c1">### chu·∫©n ho√° w, h v·ªÅ kho·∫£ng [0,1] so v·ªõi k√≠ch th∆∞·ªõc ·∫£nh r·ªìi l·∫•y cƒÉn b·∫≠c 2 
</span>    <span class="c1">### loss function s·ª≠ d·ª•ng cƒÉn b·∫≠c 2 c·ªßa x,y,w,h - n√™n xem l·∫°i c√¥ng th·ª©c
</span>    <span class="n">grid</span><span class="err"></span><span class="n">_size</span> <span class="o">=</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">GRID_W</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">GRID_H</span><span class="p">)]</span>
    <span class="n">grid</span><span class="err"></span><span class="n">_size</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">grid</span><span class="err"></span><span class="n">_size</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">pred_box_wh</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">y_pred</span><span class="p">[:,:,:,:,</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">ANCHORS</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">BOX</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">pred_box_wh</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">pred_box_wh</span> <span class="o">/</span> <span class="n">grid</span><span class="err"></span><span class="n">_size</span><span class="p">)</span>
    
    <span class="c1">### box confidence
</span>    <span class="n">pred_box_conf</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">sigmoid</span><span class="p">(</span><span class="n">y_pred</span><span class="p">[:,</span> <span class="p">:,</span> <span class="p">:,</span> <span class="p">:,</span> <span class="mi">4</span><span class="p">]),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">pred_box_prob</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">sigmoid</span><span class="p">(</span><span class="n">y_pred</span><span class="p">[:,</span> <span class="p">:,</span> <span class="p">:,</span> <span class="p">:,</span> <span class="mi">5</span><span class="p">]),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="c1"># pred_box_prob = tf.nn.softmax(y_pred[:, :, :, :, 5:])
</span>    <span class="c1"># trong tr∆∞·ªùng h·ª£p multi object detect, d√πng softmax thay sigmoid, 
</span>
    <span class="c1">### concate c√°c x,y,w,h,confidence, class_probability v·ª´a ƒë∆∞·ª£c chu·∫©n ho√° l·∫°i th√†nh y_pred m·ªõi
</span>    <span class="n">y_pred</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">pred_box_xy</span><span class="p">,</span> <span class="n">pred_box_wh</span><span class="p">,</span> <span class="n">pred_box_conf</span><span class="p">,</span> <span class="n">pred_box_prob</span><span class="p">],</span> <span class="mi">4</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Y_pred shape: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">y_pred</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
    
    <span class="c1">### ADJUST GROUND TRUTH
</span>    <span class="c1"># chu·∫©n ho√° (x,y) theo kho·∫£ng [0,1] n·∫±m trong 1 cell
</span>    <span class="n">cell_wh</span> <span class="o">=</span> <span class="p">[(</span><span class="nb">float</span><span class="p">(</span><span class="n">NORM_W</span><span class="p">)</span><span class="o">/</span><span class="n">GRID_W</span><span class="p">),</span> <span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">NORM_H</span><span class="p">)</span><span class="o">/</span><span class="n">GRID_H</span><span class="p">)]</span>
    <span class="n">cell_wh</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">cell_wh</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">center_xy</span> <span class="o">=</span> <span class="p">.</span><span class="mi">5</span><span class="o">*</span><span class="p">(</span><span class="n">y_true</span><span class="p">[:,:,:,:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">y_true</span><span class="p">[:,:,:,:,</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>
    <span class="n">center_xy</span> <span class="o">=</span> <span class="n">center_xy</span> <span class="o">/</span> <span class="n">cell_wh</span>
    <span class="n">true_box_xy</span> <span class="o">=</span> <span class="n">center_xy</span> <span class="o">-</span> <span class="n">tf</span><span class="p">.</span><span class="n">floor</span><span class="p">(</span><span class="n">center_xy</span><span class="p">)</span>
    
    <span class="c1">#chu·∫©n ho√° (w,h) v·ªÅ kho·∫£ng [0,1] theo k√≠ch th∆∞·ªõc ·∫£nh r·ªìi l·∫•y cƒÉn b·∫≠c 2
</span>    <span class="n">true_box_wh</span> <span class="o">=</span> <span class="p">(</span><span class="n">y_true</span><span class="p">[:,:,:,:,</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="o">-</span> <span class="n">y_true</span><span class="p">[:,:,:,:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">true_box_wh</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">true_box_wh</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">([</span><span class="nb">float</span><span class="p">(</span><span class="n">NORM_W</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">NORM_H</span><span class="p">)],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]))</span>
    
    <span class="c1">### ADJUST CONFIDENCE
</span>    <span class="c1"># di·ªán t√≠ch predict bounding box
</span>    <span class="n">pred_tem_wh</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nb">pow</span><span class="p">(</span><span class="n">pred_box_wh</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">([</span><span class="n">GRID_W</span><span class="p">,</span> <span class="n">GRID_H</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">pred_box_area</span> <span class="o">=</span> <span class="n">pred_tem_wh</span><span class="p">[:,:,:,:,</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">pred_tem_wh</span><span class="p">[:,:,:,:,</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">pred_box_ul</span> <span class="o">=</span> <span class="n">pred_box_xy</span> <span class="o">-</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">pred_tem_wh</span>
    <span class="n">pred_box_bd</span> <span class="o">=</span> <span class="n">pred_box_xy</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">pred_tem_wh</span>
    
    <span class="c1"># di·ªán t√≠ch ground truth bounding box
</span>    <span class="n">true_tem_wh</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nb">pow</span><span class="p">(</span><span class="n">true_box_wh</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">([</span><span class="n">GRID_W</span><span class="p">,</span> <span class="n">GRID_H</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">true_box_area</span> <span class="o">=</span> <span class="n">true_tem_wh</span><span class="p">[:,:,:,:,</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">true_tem_wh</span><span class="p">[:,:,:,:,</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">true_box_ul</span> <span class="o">=</span> <span class="n">true_box_xy</span> <span class="o">-</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">true_tem_wh</span>
    <span class="n">true_box_bd</span> <span class="o">=</span> <span class="n">true_box_xy</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">true_tem_wh</span>
    
    <span class="c1"># t√≠nh iou gi·ªØa predict BBox v√† ground truth BBox
</span>    <span class="n">intersect_ul</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">maximum</span><span class="p">(</span><span class="n">pred_box_ul</span><span class="p">,</span> <span class="n">true_box_ul</span><span class="p">)</span> 
    <span class="n">intersect_br</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">minimum</span><span class="p">(</span><span class="n">pred_box_bd</span><span class="p">,</span> <span class="n">true_box_bd</span><span class="p">)</span>
    <span class="n">intersect_wh</span> <span class="o">=</span> <span class="n">intersect_br</span> <span class="o">-</span> <span class="n">intersect_ul</span>
    <span class="n">intersect_wh</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">maximum</span><span class="p">(</span><span class="n">intersect_wh</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>
    <span class="n">intersect_area</span> <span class="o">=</span> <span class="n">intersect_wh</span><span class="p">[:,:,:,:,</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">intersect_wh</span><span class="p">[:,:,:,:,</span><span class="mi">1</span><span class="p">]</span>

    <span class="n">iou</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">truediv</span><span class="p">(</span><span class="n">intersect_area</span><span class="p">,</span> <span class="n">true_box_area</span> <span class="o">+</span> <span class="n">pred_box_area</span> <span class="o">-</span> <span class="n">intersect_area</span><span class="p">)</span>
    <span class="n">reduce_max</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_max</span><span class="p">(</span><span class="n">iou</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="bp">True</span><span class="p">)</span>

    <span class="c1"># filter gi·ªØ l·∫°i c√°c confidence c·ªßa predict BBox c√≥ iou l·ªõn nh·∫•t
</span>    <span class="n">best_box</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="n">iou</span><span class="p">,</span> <span class="n">reduce_max</span><span class="p">)</span>
    <span class="n">best_box</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">to_float</span><span class="p">(</span><span class="n">best_box</span><span class="p">)</span>
    <span class="n">true_box_conf</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">best_box</span> <span class="o">*</span> <span class="n">y_true</span><span class="p">[:,:,:,:,</span><span class="mi">4</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">true_box_prob</span> <span class="o">=</span> <span class="n">y_true</span><span class="p">[:,:,:,:,</span><span class="mi">5</span><span class="p">:]</span>
    
    <span class="c1">### concat, t·ªïng h·ª£p l·∫°i y_true sau khi ƒë√£ chu·∫©n ho√°
</span>    <span class="n">y_true</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">true_box_xy</span><span class="p">,</span> <span class="n">true_box_wh</span><span class="p">,</span> <span class="n">true_box_conf</span><span class="p">,</span> <span class="n">true_box_prob</span><span class="p">],</span> <span class="mi">4</span><span class="p">)</span>
    
    <span class="c1">### T√≠nh c√°c loss th√†nh ph·∫ßn
</span>    <span class="n">weight_coor</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">concat</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="p">[</span><span class="n">true_box_conf</span><span class="p">],</span> <span class="mi">4</span><span class="p">)</span>
    <span class="n">weight_coor</span> <span class="o">=</span> <span class="n">SCALE_COOR</span> <span class="o">*</span> <span class="n">weight_coor</span>
    <span class="n">weight_conf</span> <span class="o">=</span> <span class="n">SCALE_NOOB</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.</span> <span class="o">-</span> <span class="n">true_box_conf</span><span class="p">)</span> <span class="o">+</span> <span class="n">SCALE_CONF</span> <span class="o">*</span> <span class="n">true_box_conf</span>
    <span class="n">weight_prob</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">concat</span><span class="p">(</span><span class="n">CLASS</span> <span class="o">*</span> <span class="p">[</span><span class="n">true_box_conf</span><span class="p">],</span> <span class="mi">4</span><span class="p">)</span> 
    <span class="n">weight_prob</span> <span class="o">=</span> <span class="n">SCALE_PROB</span> <span class="o">*</span> <span class="n">weight_prob</span> 
    <span class="n">weight</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">weight_coor</span><span class="p">,</span> <span class="n">weight_conf</span><span class="p">,</span> <span class="n">weight_prob</span><span class="p">],</span> <span class="mi">4</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Weight shape: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">weight</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
    
    <span class="c1">### Finalize the loss
</span>    <span class="n">loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nb">pow</span><span class="p">(</span><span class="n">y_pred</span> <span class="o">-</span> <span class="n">y_true</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="n">loss</span> <span class="o">*</span> <span class="n">weight</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">loss</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">GRID_W</span> <span class="o">*</span> <span class="n">GRID_H</span> <span class="o">*</span> <span class="n">BOX</span><span class="o">*</span><span class="p">(</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">CLASS</span><span class="p">)])</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_sum</span><span class="p">(</span><span class="n">loss</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="p">.</span><span class="mi">5</span> <span class="o">*</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">loss</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">loss</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Code n√†y kh√° l·∫±ng nh·∫±ng, m√¨nh ƒë√£ c·ªë comment gi·∫£i th√≠ch h·∫øt s·ª©c c√≥ th·ªÉ. B·∫°n c·∫ßn ƒë·ªçc t·ª´ng d√≤ng m·ªôt v√† nghƒ© xem d√≤ng ƒë√≥ ch·∫°y nh∆∞ th·∫ø n√†o. C√°ch t·ªët nh·∫•t l√† print shape c·ªßa c√°c tensor ra.</p>

<p>V·ªõi ƒëo·∫°n code t√≠nh iou, tr∆∞·ªõc ti√™n h√£y ƒë·ªçc v·ªÅ thu·∫≠t to√°n t√≠nh iou (google ph√°t l√† ra, d·ªÖ hi·ªÉu n√™n m√¨nh kh√¥ng n√≥i nhi·ªÅu ·ªü ƒë√¢y, v√¨ b√†i d√†i r·ªìi, vi·∫øt v√†o l·∫°i th√†nh l·∫°c ƒë·ªÅ).</p>

<p><strong>T·∫°o v√† train model</strong>: M√¨nh train model ki·ªÉu ƒë·∫∑t trong v√≤ng l·∫Øp n√†y v√¨ th√≥i quen v√† l∆∞·ªùi vi·∫øt generator th√¥i, b·∫°n c√≥ th·ªÉ tu·ª≥ bi·∫øn.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre>
<span class="n">model</span> <span class="o">=</span> <span class="n">create_yolo_model</span><span class="p">()</span>
<span class="n">adam</span> <span class="o">=</span> <span class="n">Adam</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span> <span class="n">beta_1</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">beta_2</span><span class="o">=</span><span class="mf">0.999</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">1e-08</span><span class="p">,</span> <span class="n">decay</span><span class="o">=</span><span class="mf">0.0</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">loss</span> <span class="o">=</span> <span class="n">custom_loss</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span> <span class="n">adam</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'mse'</span><span class="p">])</span>

<span class="n">x_batch</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">y_batch</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">train_data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:</span><span class="nb">int</span><span class="p">(</span><span class="mf">0.98</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))]</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="mf">0.98</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):]</span>
<span class="n">x_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">data_gen</span><span class="p">(</span><span class="n">test_data</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>

<span class="n">max_iter</span> <span class="o">=</span> <span class="mi">500</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iter</span><span class="p">):</span>
    <span class="n">x_batch</span><span class="p">,</span> <span class="n">y_batch</span> <span class="o">=</span> <span class="n">data_gen</span><span class="p">(</span><span class="n">train_data</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>

    <span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_batch</span><span class="p">,</span> <span class="n">y_batch</span><span class="p">,</span> <span class="n">epochs</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">verbose</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">i</span><span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"iter </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="n">model</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="sa">f</span><span class="s">"./trained_model/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">.h5"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="4-h·∫≠u-x·ª≠-l√≠">4. H·∫≠u x·ª≠ l√≠</h2>
<p>Nh∆∞ m√¨nh vi·∫øt tr√™n r·∫±ng y_prd l√† d·∫°ng ti·ªÅn d·ªØ li·ªáu, t·ª´ y_pre, c·∫ßn t√≠nh to√°n th√™m n·ªØa m·ªõi ra ƒë∆∞·ª£c output th·∫≠t s·ª±. Ta c·∫ßn vi·∫øt 1 h√†m <strong>interpret_netout</strong> ƒë·ªÉ h·∫≠u x·ª≠ l√≠ y_pred</p>

<p>Th√™m n·ªØa, s·∫Ω x·∫£y ra 2 tr∆∞·ªùng h·ª£p m·∫°ng ƒëo√°n ra 2 bounding_box c·ªßa c√πng 1 face. ƒê·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y, ta l√†m theo c√°c b∆∞·ªõc sau:</p>
<ul>
  <li>b1: y_pred -&gt; 1 list c√°c box (box ƒë∆∞·ª£c l∆∞u trong BoundBox class), t√≠nh x√°c su·∫•t m·ªói box: <strong>prob = objectness * faceness</strong></li>
  <li>b2: L·ªçc: box c√≥ prob &gt; THRESHOLD th√¨ gi·ªØ nguy√™n, ng∆∞·ª£c l·∫°i g√°n b·∫±ng 0</li>
  <li>b2: Sort c√°c box theo prob gi·∫£m d·∫ßn</li>
  <li>b3: Duy·ªát qua t·ª´ng box, v·ªõi 1 box, x√©t c√°c box sau n√≥ xem c√≥ box n√†o c√≥ iou v·ªõi n√≥ &gt; iou_threshold th√¨ lo·∫°i nh·ªØng box ƒë√≥.</li>
  <li>b4: Cu·ªëi c√πng, t√≠nh l·∫°i t·ªça ƒë·ªô theo xmin, ymin, xmax, ymax v√† t√≠nh l·∫°i theo size c·ªßa image.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">interpret_netout</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">netout</span><span class="p">,</span> <span class="n">CLASS</span><span class="p">,</span> <span class="n">GRID_H</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">GRID_W</span> <span class="o">=</span> <span class="mi">13</span><span class="p">):</span>
    <span class="n">BOX</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">boxes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">THRESHOLD</span> <span class="o">=</span> <span class="mf">0.3</span>
    <span class="n">ANCHORS</span> <span class="o">=</span> <span class="s">'1.08,1.19,  3.42,4.41,  6.63,11.38,  9.42,5.11,  16.62,10.52'</span>
    <span class="n">ANCHORS</span> <span class="o">=</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">ANCHORS</span><span class="p">.</span><span class="n">strip</span><span class="p">())</span> <span class="k">for</span> <span class="n">ANCHORS</span> <span class="ow">in</span> <span class="n">ANCHORS</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)]</span>
    
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">GRID_H</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">GRID_W</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">BOX</span><span class="p">):</span>
                <span class="n">box</span> <span class="o">=</span> <span class="n">BoundBox</span><span class="p">(</span><span class="n">CLASS</span><span class="p">)</span>
                <span class="n">box</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">w</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">h</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">netout</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">,</span><span class="n">b</span><span class="p">,:</span><span class="mi">5</span><span class="p">]</span>
                <span class="n">box</span><span class="p">.</span><span class="n">col</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">row</span> <span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">row</span>
                <span class="n">box</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">col</span> <span class="o">+</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">x</span><span class="p">))</span> <span class="o">/</span> <span class="n">GRID_W</span>
                <span class="n">box</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">row</span> <span class="o">+</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">/</span> <span class="n">GRID_H</span>
                <span class="n">box</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="n">ANCHORS</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">w</span><span class="p">)</span> <span class="o">/</span> <span class="n">GRID_W</span>
                <span class="n">box</span><span class="p">.</span><span class="n">h</span> <span class="o">=</span> <span class="n">ANCHORS</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">h</span><span class="p">)</span> <span class="o">/</span> <span class="n">GRID_H</span>
                <span class="n">box</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">c</span><span class="p">)</span>

                <span class="n">classes</span> <span class="o">=</span> <span class="n">netout</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">:]</span>
                <span class="n">box</span><span class="p">.</span><span class="n">probs</span> <span class="o">=</span> <span class="n">softmax</span><span class="p">(</span><span class="n">classes</span><span class="p">)</span> <span class="o">*</span> <span class="n">box</span><span class="p">.</span><span class="n">c</span>
                <span class="n">box</span><span class="p">.</span><span class="n">probs</span> <span class="o">*=</span> <span class="n">box</span><span class="p">.</span><span class="n">probs</span> <span class="o">&gt;</span> <span class="n">THRESHOLD</span>
                    
    <span class="n">sorted_indices</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">argsort</span><span class="p">([</span><span class="n">box</span><span class="p">.</span><span class="n">probs</span> <span class="k">for</span> <span class="n">box</span> <span class="ow">in</span> <span class="n">boxes</span><span class="p">])))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sorted_indices</span><span class="p">)):</span>
        <span class="n">index_i</span> <span class="o">=</span> <span class="n">sorted_indices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">boxes</span><span class="p">[</span><span class="n">index_i</span><span class="p">].</span><span class="n">probs</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">sorted_indices</span><span class="p">)):</span>
                <span class="n">index_j</span> <span class="o">=</span> <span class="n">sorted_indices</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="n">iou</span> <span class="o">=</span> <span class="n">boxes</span><span class="p">[</span><span class="n">index_i</span><span class="p">].</span><span class="n">iou</span><span class="p">(</span><span class="n">boxes</span><span class="p">[</span><span class="n">index_j</span><span class="p">])</span>
                <span class="k">if</span> <span class="n">iou</span> <span class="o">&gt;=</span> <span class="mf">0.4</span><span class="p">:</span>
                    <span class="n">boxes</span><span class="p">[</span><span class="n">index_j</span><span class="p">].</span><span class="n">probs</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">elif</span> <span class="n">iou</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">boxes</span><span class="p">[</span><span class="n">index_i</span><span class="p">].</span><span class="n">probs</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">true_boxs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">box</span> <span class="ow">in</span> <span class="n">boxes</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">box</span><span class="p">.</span><span class="n">probs</span> <span class="o">&gt;</span> <span class="n">THRESHOLD</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">xmin</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">box</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">box</span><span class="p">.</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">xmax</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">box</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">box</span><span class="p">.</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">ymin</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">box</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">box</span><span class="p">.</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                <span class="n">ymax</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">box</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">box</span><span class="p">.</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                <span class="n">true_boxs</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">xmin</span><span class="p">,</span> <span class="n">ymin</span><span class="p">,</span> <span class="n">xmax</span><span class="p">,</span> <span class="n">ymax</span><span class="p">,</span> <span class="n">box</span><span class="p">.</span><span class="n">probs</span><span class="p">])</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"some error"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">true_boxs</span>

<span class="k">def</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="mf">1.</span> <span class="o">/</span> <span class="p">(</span><span class="mf">1.</span>  <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">softmax</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Trong qu√° tr√¨nh train ho·∫∑c sau khi train, mu·ªën test l·∫°i tr√™n 1 ·∫£nh, ta ch·ªâ c·∫ßn v√†i d√≤ng nh∆∞ n√†y:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">x_test</span><span class="p">):</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
    <span class="n">true_boxs</span> <span class="o">=</span> <span class="n">interpret_netout</span><span class="p">(</span><span class="n">x_test</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="mi">255</span><span class="p">,</span> <span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">true_boxs</span><span class="p">))</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">draw_face_with_box</span><span class="p">(</span><span class="n">x_test</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="mi">255</span><span class="p">,</span> <span class="n">true_boxs</span><span class="p">)</span>
    <span class="n">plot_image</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>V√† ƒë√¢y l√† k·∫øt qu·∫£ demo:</p>

<div class="imgcap">
    <div>
        <img src="https://i.imgur.com/yBpsMgh.png" width="400" />
    </div>
    <div class="thecap">H: K·∫øt q·ªßa demo </div>
</div>

<p>Nh∆∞ v·∫≠y, trong b√†i vi·∫øt n√†y m√¨nh ƒë√£ vi·∫øt nh·ªØng ph·∫ßn quan tr·ªçng nh·∫•t c·ªßa project. Nh·ªØng ph·∫ßn c√≤n l·∫°i ƒë·ªÅu n·∫±m theo link github: <a href="https://github.com/trungthanhnguyen0502/yolo-2">github trungthanhnguyen0502</a>. C√≥ ƒëo·∫°n n√†o kh√≥ hi·ªÉu, h√£y comment d∆∞·ªõi ho·∫∑c li√™n l·∫°c qua facebook</p>

:ET