I"G<h2 id="1-các-khái-niệm">1. Các khái niệm</h2>
<p>GAN là viết tắt  “Generative Adversary Networks”, hướng tới việc sinh ra dữ liệu mới sau quá trình học. GAN có thể tự sinh ra một khuôn mặt mới, một con người, một đoạn văn, chữ viết, bản nhạc giao hưởng hay những thứ tương tự thế. Thế làm cách nào để GAN học và làm được điều đó, chúng ta cần phải điểm qua một vài khái niệm.</p>

<h3 id="discriminative-model">Discriminative model</h3>
<p>Trước đây, hầu hết các model trong deep learning đều là  <strong>Discriminative model</strong>, tức sau một quá trình huấn luyện, model đạt được khả năng <strong>định vị được vị trí</strong> của một điểm dữ liệu trong phân bố dữ liệu (điển hình là bài toán phân loại). Ví dụ: một đứa trẻ được cho xem 1000 ảnh có mèo và 1000 ảnh không mèo (ảnh kèm nhãn có-không). Trải qua quá trình quan sát và học hỏi, đứa trẻ dần học được cách phân biệt chó mèo. Việc phân biệt đó chính là <strong>định vị vị trí</strong> dữ liệu trong 1 phân bố xác suất. Đó là điển hình cho một “discriminative model”. Các bài toán classify, regression, image semantic segmentation, object detection … bản chất đều là discriminative.</p>

<!-- image code -->
<div class="imgcap">
    <div>
        <img src="/assets/8-gan/2.png" width="600" />
    </div>
    <div class="thecap">H2: Model phân biệt chó mèo </div>
</div>
<hr />

<h3 id="generative-model">Generative model</h3>
<p>Cũng với ví dụ trên, trải qua sau quá trình học, đứa bé hình dung ra một con mèo mới dựa trên kiến thức nó học được và vẽ được hình con mèo tưởng tượng đó ra giấy. Việc sinh ra dữ liệu mới dựa trên kiến thức học được là việc việc của <strong>generative model</strong></p>

<h3 id="kiến-trúc-gan">Kiến trúc GAN</h3>
<p><em>Note: Để  thống nhất và dễ hiểu, mình sẽ lấy kiểu dữ liệu là ảnh để mô tả thuật toán, các dạng dữ liệu khác như âm thanh, tín hiệu đều tương tự</em>.</p>

<p><img src="https://images.viblo.asia/62b5d181-c206-4fbf-a808-36c7f10f83aa.png" alt="" /></p>

<p>GAN được kết hợp từ 2 model: generator - G và discriminator - D. GAN giống như 1 trò chơi minimax, trò cảnh sát tội phạm: tội phạm G tạo ra tiền giả, cảnh sát D học cách phân biệt thật giả. Cảnh sát càng cố gắng phân biệt tiền thật-giả thì tội phạm lại dựa vào feedback của cảnh sát để cải thiện khả năng tạo tiền giả của mình, cố gắng khiến cảnh sát phân biệt nhầm.</p>

<p>Thuật toán như sau:</p>
<ul>
  <li>B1: Từ một nhiễu z bất kì, G sinh ra fake-image G(z) có kích thước như ảnh thật (ảnh thật là x). Tại lần sinh đầu tiên, G(z) hoàn toàn là ảnh nhiễu, không có bất kì nội dung gì đặc biệt</li>
  <li>B2: x và G(z) cùng được đưa vào D kèm nhãn đúng sai. Train D để học khả năng phân biệt ảnh thật, ảnh giả.</li>
  <li>B3: Đưa G(z) vào D, dựa vào feedback của D trả về, G sẽ cải thiện khả năng fake của mình.</li>
  <li>B4: Quá trình trên sẽ lặp đi lặp lại như vậy, D dần cải thiện khả năng phân biệt, G dần cải thiện khả năng fake. Đến khi nào D không thể phân biệt được ảnh nào là ảnh do G tạo ra, ảnh nào là x, khi đó quá trình dừng lại.</li>
</ul>

<p>Input cho G là một nhiễu z, được sinh ngẫu nhiên từ một phân phối xác suất (phổ biến nhất là Gaussian). Kiến trúc GAN phổ biến là DCGAN - Deep Convolution GAN: cả G và D là các mạng Convolution nhiều lớp, sâu như hình dưới đây:
<img src="https://images.viblo.asia/27269c25-dc53-4f25-ba16-5c583747156e.png" alt="" /></p>

<h3 id="backpropagation">Backpropagation</h3>
<p>Để train được D, input gồm cả G(z) và x kèm nhãn. Như vậy, mục tiêu của D là maximinze:
<img src="https://images.viblo.asia/2abd515a-98fa-4db4-95f3-0f22ecb159e8.png" alt="" /></p>

<p>Để train được G, ta dựa vào D(G(z)). Bước này nhằm mục đích update các weight của G sao cho G(z) có thể đánh lừa được D, khiến D đoán nhầm nhãn của G(z) là y = 1.  G cố gắng minimize:
<img src="https://images.viblo.asia/3d6484aa-7b7d-40dc-a691-6377caa168ff.png" alt="" /></p>

<p>Tổng quát lại, D, G là kết quả của quá trình:
<img src="https://images.viblo.asia/3236d303-e3d3-40f7-aaae-0935d01507e3.png" alt="" /></p>

<p>Dưới đây là pseudo code minh họa thuật toán. Trong 2 bài viết tiếp theo mình sẽ viết bài hướng dẫn code 2 ứng dụng GAN đơn giản: <strong>sinh ảnh chữ viết tay</strong> (dựa trên tập mnist) và <strong>sinh ra khuôn mặt nhân vật Anime</strong>:
<img src="https://images.viblo.asia/5f0843b6-5cbf-48f0-b180-ee973e1ad831.png" alt="" /></p>

<h3 id="generator-diminished-gradient">Generator diminished gradient</h3>
<p>Trong quá trình train, ta dễ gặp phải vấn đề khi gradient cho G. Thường tại những bước đầu, D rất dễ dàng nhận dạng ảnh fake do G tạo ra. Điều đó khiến cho  V = -log(1 - D(G(z)))  có giá trị xấp xỉ 0. Điều này gây ra hiện tượng gradient vanishing khiến model khó train, khó hội tụ. Để cải thiện,  ta thay đổi công thức 1 chút:
<img src="https://images.viblo.asia/f42d99cb-3f73-428a-ac3b-1df7fbdba49d.jpeg" alt="" /></p>

<p>Như vậy, qua bài này ta đã biết thêm những khái niệm về GAN, cách hoạt động và khả năng kì diệu của nó. Từ GAN, người ta đã phát triển hàng trăm thuật toán khác nhau trong nhiều lĩnh vực lí thú. Trước khi chạm tới những thứ cao siêu đó, bạn phải hiểu được GAN cơ bản đã :p . Trong như bài tới, mình sẽ chia sẻ 1 số kinh nghiệm, thủ thuật khi trên GAN, và kèm theo đó là những đoạn code đơn giản về GAN. Cảm ơn đã đọc bài viết :)</p>

<p><strong>Note</strong>: <em>Các bài viết được viết trên trang https://viblo.asia , nếu trích dẫn hãy ghi nguồn trang cùng tên tác giả đầy đủ.</em></p>

<p><strong>facebook</strong>: <a href="https://www.facebook.com/trungthanhnguyen0502">trungthanhnguyen0502</a></p>
:ET