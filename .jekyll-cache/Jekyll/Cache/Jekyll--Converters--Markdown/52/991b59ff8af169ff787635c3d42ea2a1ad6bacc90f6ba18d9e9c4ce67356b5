I"G{<ul>
  <li><a href="#-1">1 Thuật toán</a>
    <ul>
      <li><a href="#-1-1">1.1 Content feature</a></li>
      <li><a href="#-1-2">1.2 Style feature</a></li>
    </ul>
  </li>
  <li><a href="#-2">2 Thực hành code</a>
    <ul>
      <li><a href="#-2-1">2.1 Chuẩn bị</a></li>
      <li><a href="#-2-2">2.2 Gõ code nào </a></li>
      <li><a href="#-2-3">2.3 Result </a></li>
    </ul>
  </li>
</ul>

<p>Bạn nghĩ sao về một bức ảnh chụp (máy ảnh) Hà Nội nhưng lại mang phong cách tranh của Bùi Xuân Phái :D. Với sự ra đời của thuật toán Style Transfer, chuyện đó là hoàn toàn có thể. Dưới đây là sản phẩm của mình:</p>

<!-- image code -->
<div class="imgcap">
    <div>
        <img src="/assets/4-style-transfer/h1.png" width="500" />
    </div>
    <div class="thecap">H1: Kết qủa của mình thu được </div>
</div>
<hr />

<p><a name="-1"></a></p>

<h2 id="1-thuật-toán">1. Thuật toán.</h2>

<p>Dưới đây là hình minh họa cho thuật toán. Chúng ta có 3 ảnh input gồm:</p>
<ul>
  <li>generate_image: Được khởi tạo random, lúc đầu là ảnh nhiễu bất kì, sau quá trình run thuật toán, generate_image dần dần được update trở thành kết quả chúng ta mong muốn.</li>
  <li>content_image: chứa nội dung mà generate_image sẽ chứa.</li>
  <li>style_image: chứa style (phong cách) mà generate_image sẽ chứa sau quá trình update sẽ thành ảnh mong muốn.</li>
</ul>

<p><em>Note: đường update gradient mình vẽ thiếu mũi tên, chiều mũi tên từ combine_loss hướng tới generate_image</em></p>

<div class="imgcap">
    <div>
        <img src="/assets/4-style-transfer/h2.png" width="600" />
    </div>
    <div class="thecap">H2: Minh hoạ thuật toán </div>
</div>
<hr />

<p>Ý tưởng thuật toán rất đơn giản: cả 3 ảnh cùng đưa vào 1 <strong>pretrain-CNN</strong> để extract ra các thông tin sau:</p>
<ul>
  <li>Với content_image thì extract ra <strong>content_feature</strong> (dữ liệu liên quan tới nội dung ảnh), ta gọi là <strong>content_A</strong></li>
  <li>Với style_image thì extract ra <strong>style_feature</strong>, gọi là <strong>style_B</strong></li>
  <li>Với generate_image thì extract ra cả 2 loại trên, gọi là <strong>content_C</strong> và <strong>style_C</strong></li>
  <li>Dựa vào 4 feature trên, ta tính hay “sự sai khác” theo dạng:  <strong>loss = F(content_A - content_C) + G(style_B - style_C)</strong></li>
  <li>Tính <strong>gradient</strong> của loss theo biến generate_image (Hay tính đạo hàm Loss theo generate_image)</li>
  <li>Update generate_image với thuật toán gradient descent</li>
  <li>Quy trình sẽ lặp đi lặp lại nhằm tối ưu giá trị loss, dừng thuật toán khi generate_image đủ tốt</li>
</ul>

<!-- ########## -->
<p><a name="-1-1"></a></p>

<h3 id="11-content_feature">1.1 Content_feature</h3>
<p>Câu hỏi đặt ra là làm thế nào để extract ra content_feature và style_feature từ 1 model pretrain, và làm thế nào để phân biệt giữa hai loại này?</p>

<p>Với content_feature: output của các layer trong CNN chính là content_feature, nó chứa thông tin về đường nét, bố cục, hình dạng của mọi thứ trong ảnh. Giả sử tại 1 layer thứ i, ta rút ra được \(output_i\) với shape là \((1 , w_i, h_i, c_i)\). Có thể gọi \(output_i\) bao gồm \(c_i\) feature_map, mỗi feature_map có shape: \((1 , w_i, h_i)\) . Mỗi feature_map này “phản ảnh” thông tin ảnh theo 1 “góc nhìn” khác nhau</p>

<!-- ########## -->
<p><a name="-1-2"></a></p>

<h3 id="12-style_feature">1.2 Style_feature</h3>
<p>Thế còn Style_feature? cái này phức tạp hơn một chút. Cũng từ \(output_i\) trên, ta cần biến đổi một chút ta mới nhận được style_feature:</p>
<ul>
  <li>Giả sử tại layer thứ i, ta có \(output\) là A với shape: \((1 , 5, 5, 9)\), tức A gồm 9 feature_map (5 x 5)</li>
  <li>Ta cần reshape A thành matrix B với shape: \((25, 9)\).</li>
  <li>Tính gram_matrix <strong>\(C = B^T * B\)</strong>, với \(B^T\) là ma trận chuyển vị của B.</li>
  <li>C có \(shape = (9,9)\), C chính là ma trận “tương quan” giữa 9 feature_map với nhau, nó phản ảnh style/phong cách của ảnh/tranh vẽ</li>
</ul>

<p>Thuật toán về cơ bản là thế, bắt tay vào code bạn sẽ dễ hiểu hơn.</p>

<!-- ########## -->
<p><a name="-2"></a></p>

<h2 id="2-thực-hành-code">2. Thực hành code</h2>

<!-- ########## -->
<p><a name="-2-1"></a></p>

<h3 id="21-chuẩn-bị">2.1 Chuẩn bị</h3>
<ul>
  <li>
    <p>Bạn nên vào github của mình và download code về tại: <a href="https://github.com/trungthanhnguyen0502/style-transfer">github trungthanhnguyen0502</a></p>
  </li>
  <li>Mình code bằng tensorflow thuần, bạn cần chút hiểu biết về “computation graph” trong tensorflow.</li>
  <li>
    <p>Bạn có thể dùng bất kì model pretrain CNN nào, tuy nhiên mình (và nhiều người) nhận thấy bài toán dạng này thì <strong>VGG</strong> thích hợp nhất. Mình dùng 1 phiên bản VGG16 mà mình hay sử dụng. Để có thể sử dụng VGG cùng phiên bản với mình, hãy đảm bảo trong project của bạn có 2 file : <strong>download.py</strong> và <strong>vgg16.py</strong> được tải trong github của mình</p>
  </li>
  <li>
    <p>Mình hướng dẫn code chính, việc lặt vặt như import thư viện, viết function phụ mình không giải thích ở blog, hãy đọc code</p>
  </li>
  <li>
    <p>4 dòng đầu bạn có thể xóa đi nếu không sử dụng google colab.</p>
  </li>
  <li>Để đọc code dễ hiểu nhất, nên <strong>đọc từ hàm transfer</strong> để hiểu được kịch bản code. Trong transfer sẽ gọi đến các hàm khác.</li>
</ul>

<!-- ########## -->
<p><a name="-2-2"></a></p>

<h3 id="22-gõ-code-nào">2.2 Gõ code nào</h3>

<p>Download và khởi tạo model:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">vgg16</span><span class="p">.</span><span class="n">maybe_download</span><span class="p">()</span>
<span class="n">vgg</span> <span class="o">=</span> <span class="n">vgg16</span><span class="p">.</span><span class="n">VGG16</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Function tính mean_square_error (MSE)và tính gram_matrix (gram_matrix: \(C= B^T * B\))</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">mean_square_error</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">square</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">gram_matrix</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>    
    <span class="n">shape</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">get_shape</span><span class="p">()</span>
    <span class="n">reshape_tensor</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">shape</span><span class="p">[</span><span class="mi">3</span><span class="p">])])</span>
    <span class="n">gram_tensor</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">reshape_tensor</span><span class="p">),</span> <span class="n">reshape_tensor</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">gram_tensor</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Content Loss function</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">content_loss</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">content_img</span><span class="p">,</span> <span class="n">c_layer_ids</span><span class="p">):</span>
    <span class="s">"""
    Tính loss giữa content image và generate image
    content_img: image được dùng để trích xuất thông tin về nội dung
    c_layer_ids: index của các layer sẽ trích xuất feature_map
    """</span>
    <span class="k">with</span> <span class="n">model</span><span class="p">.</span><span class="n">graph</span><span class="p">.</span><span class="n">as_default</span><span class="p">():</span>
        <span class="n">c_layers</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">get_layer_tensors</span><span class="p">(</span><span class="n">c_layer_ids</span><span class="p">)</span>
        <span class="n">feed_dict</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">create_feed_dict</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">content_img</span><span class="p">)</span>
        <span class="n">c_values</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">c_layers</span><span class="p">,</span> <span class="n">feed_dict</span><span class="o">=</span><span class="n">feed_dict</span><span class="p">)</span>
        <span class="n">c_loss</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">v</span><span class="p">,</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">c_values</span><span class="p">,</span> <span class="n">c_layers</span><span class="p">):</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="n">mean_square_error</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
            <span class="n">c_loss</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">loss</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">c_loss</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Style Loss function</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">style_loss</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">style_img</span><span class="p">,</span> <span class="n">s_layer_ids</span><span class="p">):</span>
    <span class="s">"""
    Tương tự content_loss, tính loss giữa style của style_img và generate image
    """</span>
    <span class="k">with</span> <span class="n">model</span><span class="p">.</span><span class="n">graph</span><span class="p">.</span><span class="n">as_default</span><span class="p">():</span>
        <span class="n">s_layers</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">get_layer_tensors</span><span class="p">(</span><span class="n">s_layer_ids</span><span class="p">)</span>
        <span class="n">gram_matrix_tensor</span> <span class="o">=</span> <span class="p">[</span><span class="n">gram_matrix</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">s_layers</span><span class="p">]</span>
        
        <span class="n">feed_dict</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">create_feed_dict</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">style_img</span><span class="p">)</span>
        <span class="n">gram_matrix_values</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">gram_matrix_tensor</span><span class="p">,</span> <span class="n">feed_dict</span><span class="o">=</span><span class="n">feed_dict</span><span class="p">)</span>

        <span class="n">s_loss</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">v</span><span class="p">,</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">gram_matrix_values</span><span class="p">,</span> <span class="n">gram_matrix_tensor</span><span class="p">):</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="n">mean_square_error</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">l</span><span class="p">)</span>
            <span class="n">s_loss</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">loss</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">s_loss</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Denoise Loss function: 1 kĩ thuật được bổ sung để generate_image giảm thiểu sự sai khác giữa 2 pixel cạnh nhau.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">denoise_loss</span><span class="p">(</span><span class="n">input_</span><span class="p">):</span>
    <span class="n">d_loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">input_</span><span class="p">[:,</span><span class="mi">1</span><span class="p">:,:,:]</span> <span class="o">-</span> <span class="n">input_</span><span class="p">[:,:</span><span class="o">-</span><span class="mi">1</span><span class="p">,:,:]))</span> <span class="o">+</span> \
            <span class="n">tf</span><span class="p">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">input_</span><span class="p">[:,:,</span><span class="mi">1</span><span class="p">:,:]</span> <span class="o">-</span> <span class="n">input_</span><span class="p">[:,:,:</span><span class="o">-</span><span class="mi">1</span><span class="p">,:]))</span>
    <span class="k">return</span> <span class="n">d_loss</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Transfer: là kịch bản chính, gọi tới các hàm trên.</p>

<ul>
  <li>Tensorflow cung cấp cho chúng ta hàm tf.gradient(loss, tensor_variable) để tính đạo hàm của loss theo biến tensor_variable.</li>
  <li>
    <p>step_size là 1 giá trị cho trước, có thể coi là giá trị learning rate khởi tạo</p>
  </li>
  <li>Ta áp dụng thuật toán tính learning rate trong mỗi vòng lặp, việc tính learning rate này đảm bảo giá trị thay đổi mỗi pixel trong generate_img không quá lớn, không vượt quá giá trị max trong ma trận Gradient, công thức:</li>
</ul>

\[learningRate = \frac{stepsize}{(gradient.max() + 1e-8)}\]

<ul>
  <li>
    <p>Ngoài gradient.max(), ta có thể dùng gradient.std()</p>
  </li>
  <li>
    <p>w_content, w_style, w_denoise là trọng số biểu thị độ quan trọng của từng loại loss: content, style hay denoise</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">transfer</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">content_img</span><span class="p">,</span> <span class="n">style_img</span><span class="p">,</span>
             <span class="n">c_layer_ids</span><span class="p">,</span> <span class="n">s_layer_ids</span><span class="p">,</span> <span class="n">w_content</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span> 
             <span class="n">w_style</span><span class="o">=</span><span class="mf">10.0</span><span class="p">,</span> <span class="n">w_denoise</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">iters</span><span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="n">step_size</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>

    <span class="c1"># generate_img
</span>    <span class="n">generate_img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="o">*</span><span class="n">content_img</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span> <span class="o">+</span> <span class="mi">128</span>
    <span class="n">session</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">Session</span><span class="p">(</span><span class="n">graph</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">graph</span><span class="p">)</span>

    <span class="n">c_loss</span> <span class="o">=</span> <span class="n">content_loss</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">content_img</span><span class="p">,</span> <span class="n">c_layer_ids</span><span class="p">)</span>
    <span class="n">s_loss</span> <span class="o">=</span> <span class="n">style_loss</span><span class="p">(</span> <span class="n">model</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">style_img</span><span class="p">,</span> <span class="n">s_layer_ids</span><span class="p">)</span>
    <span class="n">d_loss</span> <span class="o">=</span> <span class="n">denoise_loss</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nb">input</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">model</span><span class="p">.</span><span class="n">graph</span><span class="p">.</span><span class="n">as_default</span><span class="p">():</span>
        <span class="n">adj_content</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mf">1e-10</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'adj_content'</span><span class="p">)</span>
        <span class="n">adj_style</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mf">1e-10</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'adj_style'</span><span class="p">)</span>
        <span class="n">adj_denoise</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mf">1e-10</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'adj_denoise'</span><span class="p">)</span>

        <span class="n">session</span><span class="p">.</span><span class="n">run</span><span class="p">([</span><span class="n">adj_content</span><span class="p">.</span><span class="n">initializer</span><span class="p">,</span>
                     <span class="n">adj_style</span><span class="p">.</span><span class="n">initializer</span><span class="p">,</span>
                     <span class="n">adj_denoise</span><span class="p">.</span><span class="n">initializer</span><span class="p">])</span>
 
        <span class="n">update_adj_content</span> <span class="o">=</span> <span class="n">adj_content</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="n">c_loss</span> <span class="o">+</span> <span class="mf">1e-10</span><span class="p">))</span>
        <span class="n">update_adj_style</span> <span class="o">=</span> <span class="n">adj_style</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="n">s_loss</span> <span class="o">+</span> <span class="mf">1e-10</span><span class="p">))</span>
        <span class="n">update_adj_denoise</span> <span class="o">=</span> <span class="n">adj_denoise</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="n">d_loss</span> <span class="o">+</span> <span class="mf">1e-10</span><span class="p">))</span>

        <span class="n">total_loss</span> <span class="o">=</span> <span class="n">w_content</span> <span class="o">*</span> <span class="n">adj_content</span> <span class="o">*</span> <span class="n">c_loss</span> <span class="o">+</span>  <span class="n">w_denoise</span> <span class="o">*</span> <span class="n">adj_denoise</span> <span class="o">*</span> <span class="n">d_loss</span> <span class="o">+</span> <span class="n">w_style</span> <span class="o">*</span> <span class="n">adj_style</span> <span class="o">*</span> <span class="n">s_loss</span>
        <span class="n">grad</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">gradients</span><span class="p">(</span><span class="n">total_loss</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="nb">input</span><span class="p">)</span>
        <span class="n">run_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">grad</span><span class="p">,</span> <span class="n">update_adj_content</span><span class="p">,</span> <span class="n">update_adj_style</span><span class="p">,</span> <span class="n">update_adj_denoise</span><span class="p">]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iters</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="n">feed_dict</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">create_feed_dict</span><span class="p">(</span><span class="n">image</span><span class="o">=</span><span class="n">generate_img</span><span class="p">)</span>
            <span class="n">grad_value</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">run_list</span><span class="p">,</span> <span class="n">feed_dict</span><span class="o">=</span><span class="n">feed_dict</span><span class="p">)</span>
            <span class="n">grad_value</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">grad_value</span><span class="p">)</span>
            <span class="n">grad_value</span> <span class="o">=</span> <span class="n">grad_value</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">generate_img</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
            
            <span class="n">learning_rate</span> <span class="o">=</span> <span class="n">step_size</span><span class="o">/</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">grad_value</span><span class="p">)</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
            <span class="n">generate_img</span> <span class="o">-=</span> <span class="n">grad_value</span> <span class="o">*</span> <span class="n">learning_rate</span>
            <span class="n">generate_img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">generate_img</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">255.0</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
                <span class="n">plot_image</span><span class="p">(</span><span class="n">generate_img</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">generate_img</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<!-- ########## -->
<p><a name="-2-3"></a></p>

<h3 id="23-kết-quả-thu-được">2.3 Kết quả thu được</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="n">content_dir</span> <span class="o">=</span> <span class="s">'data/content.jpg'</span>
<span class="n">content_img</span> <span class="o">=</span> <span class="n">load_image</span><span class="p">(</span><span class="n">content_dir</span><span class="p">)</span>
<span class="n">content_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">content_img</span><span class="p">,</span> <span class="p">(</span><span class="mi">224</span><span class="p">,</span><span class="mi">224</span><span class="p">))</span>

<span class="n">style_dir</span> <span class="o">=</span> <span class="s">'data/style.jpeg'</span>
<span class="n">style_img</span> <span class="o">=</span> <span class="n">load_image</span><span class="p">(</span><span class="n">style_dir</span><span class="p">)</span>
<span class="n">style_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">style_img</span><span class="p">,</span> <span class="p">(</span><span class="mi">224</span><span class="p">,</span><span class="mi">224</span><span class="p">))</span>

<span class="n">c_layer_ids</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="n">s_layer_ids</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span>
<span class="n">result_img</span> <span class="o">=</span> <span class="n">transfer</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">content_img</span><span class="p">,</span> <span class="n">style_img</span><span class="p">,</span> 
                      <span class="n">c_layer_ids</span><span class="p">,</span> <span class="n">s_layer_ids</span><span class="p">,</span> 
                      <span class="n">w_content</span><span class="o">=</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">w_style</span><span class="o">=</span><span class="mf">9.0</span><span class="p">,</span> <span class="n">w_denoise</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> 
                      <span class="n">iters</span><span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="n">step_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Sau khi mình run code nhiều lần thấy w_content giao động quanh giá trị 2, w_style ~ 10, w_denoise ~ 0.5 sẽ cho kết quả tốt nhất. Bạn có thể tự custom code, như điều chỉnh tham số, bỏ denoise_loss, áp dụng với ảnh khác. Ngoài ra, bạn có thể code bằng Keras, Pytorch với các pretrain model tốt hơn, gọn hơn</p>

<p>Kết qủa: với các tham số mình đã đặt mặc định, chỉ sau 60 vòng lặp, ta đã có thể thu được kết quả mong muốn:</p>

<div class="imgcap">
    <div>
        <img src="/assets/4-style-transfer/result.png" width="500" />
    </div>
    <div class="thecap">H3: Kết qủa của mình thu được </div>
</div>

:ET